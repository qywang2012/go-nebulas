// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: access.proto

/*
Package corepb is a generated protocol buffer package.

It is generated from these files:
	access.proto

It has these top-level messages:
	Access
	Whitelist
	Blacklist
	Contract
	Nrc20List
*/
package corepb

import (
	fmt "fmt"

	proto "github.com/gogo/protobuf/proto"

	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Access struct {
	// WhiteList of transactions, some of which are accepted only when conditions permit
	Whitelist *Whitelist `protobuf:"bytes,1,opt,name=whitelist" json:"whitelist,omitempty"`
	// Blacklists of transactions, some of which are not accepted on the blacklists
	Blacklist *Blacklist `protobuf:"bytes,2,opt,name=blacklist" json:"blacklist,omitempty"`
	// nrc20list of transactions, some of security check for this tx.
	Nrc20List *Nrc20List `protobuf:"bytes,3,opt,name=nrc20list" json:"nrc20list,omitempty"`
}

func (m *Access) Reset()                    { *m = Access{} }
func (m *Access) String() string            { return proto.CompactTextString(m) }
func (*Access) ProtoMessage()               {}
func (*Access) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{0} }

func (m *Access) GetWhitelist() *Whitelist {
	if m != nil {
		return m.Whitelist
	}
	return nil
}

func (m *Access) GetBlacklist() *Blacklist {
	if m != nil {
		return m.Blacklist
	}
	return nil
}

func (m *Access) GetNrc20List() *Nrc20List {
	if m != nil {
		return m.Nrc20List
	}
	return nil
}

type Whitelist struct {
	// TODO(larry): later may change
	NbrePublisher []string `protobuf:"bytes,1,rep,name=nbre_publisher,json=nbrePublisher" json:"nbre_publisher,omitempty"`
}

func (m *Whitelist) Reset()                    { *m = Whitelist{} }
func (m *Whitelist) String() string            { return proto.CompactTextString(m) }
func (*Whitelist) ProtoMessage()               {}
func (*Whitelist) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{1} }

func (m *Whitelist) GetNbrePublisher() []string {
	if m != nil {
		return m.NbrePublisher
	}
	return nil
}

type Blacklist struct {
	// Hex string of the transaction's from address.
	From []string `protobuf:"bytes,1,rep,name=from" json:"from,omitempty"`
	// Hex string of the transaction's to address.
	To []string `protobuf:"bytes,2,rep,name=to" json:"to,omitempty"`
	// contract access data
	Contracts []*Contract `protobuf:"bytes,3,rep,name=contracts" json:"contracts,omitempty"`
}

func (m *Blacklist) Reset()                    { *m = Blacklist{} }
func (m *Blacklist) String() string            { return proto.CompactTextString(m) }
func (*Blacklist) ProtoMessage()               {}
func (*Blacklist) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{2} }

func (m *Blacklist) GetFrom() []string {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Blacklist) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Blacklist) GetContracts() []*Contract {
	if m != nil {
		return m.Contracts
	}
	return nil
}

type Contract struct {
	// Hex string of the call type transaction's to address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// slice of call type transaction's function string.
	Functions []string `protobuf:"bytes,2,rep,name=functions" json:"functions,omitempty"`
	// slice of deploy type transaction's data keyword.
	Keywords []string `protobuf:"bytes,3,rep,name=keywords" json:"keywords,omitempty"`
}

func (m *Contract) Reset()                    { *m = Contract{} }
func (m *Contract) String() string            { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()               {}
func (*Contract) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{3} }

func (m *Contract) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Contract) GetFunctions() []string {
	if m != nil {
		return m.Functions
	}
	return nil
}

func (m *Contract) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

type Nrc20List struct {
	Contracts []string `protobuf:"bytes,1,rep,name=contracts" json:"contracts,omitempty"`
}

func (m *Nrc20List) Reset()                    { *m = Nrc20List{} }
func (m *Nrc20List) String() string            { return proto.CompactTextString(m) }
func (*Nrc20List) ProtoMessage()               {}
func (*Nrc20List) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{4} }

func (m *Nrc20List) GetContracts() []string {
	if m != nil {
		return m.Contracts
	}
	return nil
}

func init() {
	proto.RegisterType((*Access)(nil), "corepb.Access")
	proto.RegisterType((*Whitelist)(nil), "corepb.Whitelist")
	proto.RegisterType((*Blacklist)(nil), "corepb.Blacklist")
	proto.RegisterType((*Contract)(nil), "corepb.Contract")
	proto.RegisterType((*Nrc20List)(nil), "corepb.Nrc20list")
}

func init() { proto.RegisterFile("access.proto", fileDescriptorAccess) }

var fileDescriptorAccess = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x41, 0x4f, 0x84, 0x30,
	0x10, 0x85, 0x03, 0x18, 0xdc, 0xce, 0xea, 0x46, 0xe7, 0x44, 0x8c, 0x07, 0x42, 0x62, 0x82, 0x17,
	0x34, 0xf8, 0x0b, 0xd4, 0xbb, 0x31, 0xbd, 0x78, 0x73, 0x43, 0x4b, 0x37, 0x4b, 0x16, 0x5b, 0xd2,
	0x76, 0xb3, 0xf1, 0xb7, 0xf8, 0x67, 0x0d, 0x85, 0xd2, 0xec, 0x8d, 0x79, 0xef, 0x7d, 0xbc, 0x61,
	0x80, 0xab, 0x86, 0x73, 0x61, 0x4c, 0x35, 0x68, 0x65, 0x15, 0xa6, 0x5c, 0x69, 0x31, 0xb0, 0xe2,
	0x2f, 0x82, 0xf4, 0xd5, 0x19, 0xf8, 0x04, 0xe4, 0xb4, 0xef, 0xac, 0xe8, 0x3b, 0x63, 0xb3, 0x28,
	0x8f, 0xca, 0x75, 0x7d, 0x5b, 0x4d, 0xb1, 0xea, 0xcb, 0x1b, 0x34, 0x64, 0x46, 0x80, 0xf5, 0x0d,
	0x3f, 0x38, 0x20, 0x3e, 0x07, 0xde, 0xbc, 0x41, 0x43, 0x66, 0x04, 0xa4, 0xe6, 0xf5, 0xb3, 0x03,
	0x92, 0x73, 0xe0, 0xc3, 0x1b, 0x34, 0x64, 0x8a, 0x1a, 0xc8, 0xd2, 0x8c, 0x0f, 0xb0, 0x91, 0x4c,
	0x8b, 0xed, 0x70, 0x64, 0x7d, 0x67, 0xf6, 0x42, 0x67, 0x51, 0x9e, 0x94, 0x84, 0x5e, 0x8f, 0xea,
	0xa7, 0x17, 0x8b, 0x2d, 0x90, 0xa5, 0x1c, 0x11, 0x2e, 0x76, 0x5a, 0xfd, 0xcc, 0x49, 0xf7, 0x8c,
	0x1b, 0x88, 0xad, 0xca, 0x62, 0xa7, 0xc4, 0x56, 0x61, 0x05, 0x84, 0x2b, 0x69, 0x75, 0xc3, 0xad,
	0xc9, 0x92, 0x3c, 0x29, 0xd7, 0xf5, 0x8d, 0xdf, 0xea, 0x7d, 0x36, 0x68, 0x88, 0x14, 0xdf, 0xb0,
	0xf2, 0x32, 0x66, 0x70, 0xd9, 0xb4, 0xad, 0x16, 0xc6, 0xb8, 0x8b, 0x11, 0xea, 0x47, 0xbc, 0x07,
	0xb2, 0x3b, 0x4a, 0x6e, 0x3b, 0x25, 0xcd, 0x5c, 0x16, 0x04, 0xbc, 0x83, 0xd5, 0x41, 0xfc, 0x9e,
	0x94, 0x6e, 0xa7, 0x4a, 0x42, 0x97, 0xb9, 0x78, 0x04, 0xb2, 0x1c, 0x63, 0x7c, 0x4d, 0x58, 0x6e,
	0xfa, 0x8a, 0x20, 0xb0, 0xd4, 0xfd, 0xcc, 0x97, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x64,
	0x25, 0x1b, 0xdc, 0x01, 0x00, 0x00,
}
